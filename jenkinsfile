pipeline {
    agent any
    
    options {
        timeout(time: 1, unit: 'HOURS')
    }
    
    tools {
        nodejs 'NodeJS 14' // Replace with your Node.js installation name
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                // List files to ensure package.json is present
                sh 'ls -l'
                // Show contents of package.json for debugging purposes
                sh 'cat package.json'
            }
        }
        
        stage('Build') {
            steps {
                sh 'npm install'
                // Check if there is a build script, otherwise skip
                script {
                    def packageJson = readFile('package.json')
                    def pkg = new groovy.json.JsonSlurper().parseText(packageJson)
                    if (pkg.scripts && pkg.scripts.build) {
                        sh 'npm run build'
                    } else {
                        echo 'No build script defined in package.json'
                    }
                }
                // If a Dockerfile exists, build the Docker image
                script {
                    if (fileExists('Dockerfile')) {
                        sh 'docker build -t my-node-app .'
                    } else {
                        echo 'No Dockerfile found, skipping Docker build'
                    }
                }
                // Save artifacts, if any
                archiveArtifacts artifacts: '*.json,*.js,dist/*', fingerprint: true
            }
        }
        
        stage('Test') {
            steps {
                sh 'npm test'
            }
        }
        
        stage('Code Quality Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh 'sonar-scanner'
                }
            }
        }
        
        stage('Deploy') {
            steps {
                script {
                    if (fileExists('docker-compose.test.yml')) {
                        sh 'docker-compose -f docker-compose.test.yml up -d'
                    } else {
                        echo 'No docker-compose.test.yml found, skipping Docker Compose'
                    }
                }
            }
        }
        
        stage('Release') {
            steps {
                input message: 'Deploy to production?', ok: 'Release'
            }
        }
        
        stage('Monitoring and Alerting') {
            steps {
                input message: 'Configure monitoring and alerting for production?', ok: 'Done'
            }
        }
    }
    
    post {
        always {
            echo 'Cleaning up...'
            cleanWs()
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
